<?xml version="1.0" encoding="UTF-8"?>
<files>
	<vulnerableFiles>
		<file name = "addressbook.module" code = "CVE-2012-2306" project = "drupal">
			<desc>
				<vulnerDetails>
					from drupal addressbook addon 6.x-4.2 
					
					$current_day concatenated into query
					
					$query='
						SELECT 
							mid, 
							first_name, 
							middle_name, 
							last_name, 
							email, 
							birth_day 
						FROM 
							{addressbook_member} 
						WHERE 
							birth_day LIKE "%'.$current_day.'"';
				</vulnerDetails>
			</desc>
		</file>
		<file name = "addressbook_csv_upload.inc" code = "CVE-2012-2306" project = "drupal">
			<desc>
				<vulnerDetails>
					from drupal addressbook addon 6.x-4.2 
					
					$data is retrieved from a file and split up based on a comma delimiter
					$data concatenated into multiple queries
					
					$query  = 'INSERT INTO addressbook_family 
					(middle_name, 
					last_name, 
					street, 
					zipcode, 
					city,
					country, 
					telephone, 
					last_updated) VALUES (';
						$query .= '"'.$data["middle_name"].'",';
						$query .= '"'.$data["last_name"].'",';
						$query .= '"'.$data["street"].'",';
						$query .= '"'.$data["zipcode"].'",';
						$query .= '"'.$data["city"].'",';
						$query .= '"'.$data["country"].'",';
						$query .= '"'.$data["telephone"].'",';
						$query .= 'SYSDATE() )';
				</vulnerDetails>
			</desc>
		</file>
		<file name = "addressbook_family.inc" code = "CVE-2012-2306" project = "drupal">
			<desc>
				<vulnerDetails>
					from drupal addressbook addon 6.x-4.2 
					
					many parameters directly concatenated into query
					
					$query = 'UPDATE addressbook_family SET ';
					$query .= 'middle_name = "'.$middle_name.'",';
					$query .= 'last_name = "'.$last_name.'",';
					$query .= 'street = "'.$street.'",';
					$query .= 'zipcode = "'.$zipcode.'",';
					$query .= 'city = "'.$city.'",';
					$query .= 'country = "'.$country.'",';
					$query .= 'telephone = "'.$telephone.'",';
					$query .= 'uid = "'.$owner.'",';
					$query .= 'last_updated = SYSDATE() ';
					$query .= 'WHERE fid='.$fid;

					db_query($query);
				</vulnerDetails>
			</desc>
		</file>
		<file name = "addressbook_map.inc" code = "CVE-2012-2306" project = "drupal">
			<desc>
				<vulnerDetails>
					from drupal addressbook addon 6.x-4.2 
					
					$fid parameter directly concatenated into query
					
					$fid=$_POST["fid"];
					addressbook_debug_param("fid", $fid); // just prints fid = $fid
					
					$query  = '
					SELECT 
						b.last_name as last_name,
						b.middle_name as middle_name,
						b.street as street, 
						b.city as city, 
						b.country as country
					FROM 
						addressbook_family b
					WHERE 
						b.fid='.$fid;
		
					$queryResult = db_query($query);
					$data = db_fetch_object($queryResult);
					
				</vulnerDetails>
			</desc>
		</file>
		<file name = "addressbook_member.inc" code = "CVE-2012-2306" project = "drupal">
			<desc>
				<vulnerDetails>
					from drupal addressbook addon 6.x-4.2 
					
					many parameters directly concatenated into query
					
					$query  = 'select ';
					$query .= ' a.mid as mid ';
					$query .= 'from ';
					$query .= ' addressbook_member a ';
					$query .= 'where ' ;
					$query .= ' a.first_name="'.$first_name.'" and ';
					$query .= ' a.middle_name="'.$middle_name.'" and ';
					$query .= ' a.last_name="'.$last_name.'"';
				
					addressbook_debug_sql($query);
					$queryResult = db_query($query);     
					$data = db_fetch_object($queryResult);
				</vulnerDetails>
			</desc>
		</file>
		<file name = "addressbook_picture.inc" code = "CVE-2012-2306" project = "drupal">
			<desc>
				<vulnerDetails>
					from drupal addressbook addon 6.x-4.2 
					
					$fid and $mid parameter directly concatenated into query
					
					$query  = 'INSERT INTO addressbook_picture (fid,mid,picture,uid,last_updated) VALUES (';
					$query .= '"'.$fid.'",';
					$query .= '"'.$mid.'",';
					$query .= '"'.$filename.'",';
					$query .= '"'.$user->uid.'",';
					$query .= 'SYSDATE() )';
					db_query($query);
				</vulnerDetails>
			</desc>
		</file>
		<file name = "addressbook_utils.inc" code = "CVE-2012-2306" project = "drupal">
			<desc>
				<vulnerDetails>
					from drupal addressbook addon 6.x-4.2 
					
					$uid parameter directly concatenated into query
					
					$query  = 'SELECT uid, name FROM {users} WHERE uid='.$uid;
					$queryResult = db_query($query);
					$tmp = db_fetch_object($queryResult);
				</vulnerDetails>
			</desc>
		</file>
		<file name = "admin.categories.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					inputs passed via "filter_order" and "filter_order_Dir" are not verified before being sent to index.php
					
					$order 			= ' ORDER BY  '.$filter_order.' '. $filter_order_Dir.', z.title, c.ordering';
				</vulnerDetails>
			</desc>
		</file>
		<file name = "admin.contact.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					inputs passed via "filter_order" and "filter_order_Dir" are not verified before being sent to index.php
					
					$orderby 	= ' ORDER BY '. $filter_order .' '. $filter_order_Dir .', category, cd.ordering';
				</vulnerDetails>
			</desc>
		</file>
		<file name = "admin.trash.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					inputs passed via "filter_order" and "filter_order_Dir" are not verified before being sent to index.php
					
					$orderby = ' ORDER BY '. $filter_order .' '. $filter_order_Dir .', s.name, cc.name, c.title';
					...
					$query = 'SELECT c.title, c.id, c.sectionid, c.catid, g.name AS groupname, cc.title AS catname, s.title AS sectname'
					. ' FROM #__content AS c'
					. ' LEFT JOIN #__categories AS cc ON cc.id = c.catid'
					. ' LEFT JOIN #__sections AS s ON s.id = cc.section AND s.scope="content"'
					. ' LEFT JOIN #__groups AS g ON g.id = c.access'
					. ' LEFT JOIN #__users AS u ON u.id = c.checked_out'
					. $where
					. $orderby
					;
				</vulnerDetails>
			</desc>
		</file>
		<file name = "aggregation.module" code = "CVE-2008-2999" project = "drupal">
			<desc>
				<vulnerDetails>
					From Drupal Aggregation project
					https://cgit.drupalcode.org/aggregation/
					line 217
					watchdog('aggregation', 'aggregation has finished aggregating items from '.$feed->title);
					
					line 236
					watchdog('aggregation', $e->getMessage(), WATCHDOG_ERROR, l(t('view'), "node/$feed->nid"));
					
					line 607
					db_query("UPDATE {aggregation_feed} SET original_author = '%s', url = '%s', ".
					"username = '%s', ".(trim($node->password) != '' ? "password = '{$node->password}'," : '')." refresh_interval = %d, title_as_guid_interval = %d, ".
					"promote_to_frontpage = %d, item_categories = '%s', time_to_live = %d, aggregation_feed_options = '%s', ".
					"etag = '%s', last_modified = %d, last_refreshed = %d WHERE nid = %d",
					$node->original_author, $node->url, $node->username, $node->refresh_interval, 
					$node->title_as_guid_interval, $node->promote_to_frontpage, $node->item_categories, $node->time_to_live,
					$node->aggregation_feed_options, ($node->etag && $node->etag != '') ? $node->etag : '',
			
					line 640
					if (user_access('manage feed items')) return TRUE;
					return (user_access('manage own feed items') && ($user->uid == $node->uid));
					...
					if ($op == 'view') return user_access('view aggregation items');
					
					line 660
					'#title' => t(node_get_types('type', 'aggregation_item')->title_label),
					
					line 869
					($node->story_guid === '' ? '' : "story_guid = '{$node->story_guid}',")." fid = %d, image_id = %d, image_guid = '%s', aggregation_item_options = '%s' ".(trim($node->original_comments) == '' ? '' : ", original_comments = '".trim($node->original_comments)."'")." ".
					"WHERE nid = %d", $node->url, $node->original_author, $node->fid, $node->image_id, $node->image_guid ? $node->image_guid : 0, $node->aggregation_item_options, $node->nid);
					
					line 977
					<!-- return '<div class="aggregation_item_image"><img src="'.base_path().'/'. -->
					
					line 1158
					watchdog('aggregation', t("Feed \"%s\" was not modified since last refresh", array('%s' => $feed->title)));
					
					line 1205
					watchdog('aggregation',"Image with URL \"".$image_array['url']."\" from feed \"{$feed->title}\"".
						" was not retrieved.");
					...
					if (!$prexisting) watchdog('aggregation', "Added item \"$item_object->title\" from feed \"$feed->title\"", WATCHDOG_NOTICE, l(t('view'), "node/$item_object->nid"));
					else watchdog('aggregation', "Updated item \"$item_object->title\" from feed \"$feed->title\"", WATCHDOG_NOTICE, l(t('view'), "node/$item_object->nid"));
					
					line 1392
					$filename = substr($image_array['url'], strrpos($image_array['url'], '/') + 1);
					...
					if (file_put_contents($newfile, $data) == 0)
					...
					watchdog('aggregation', $e->getMessage(), WATCHDOG_ERROR);
					
				</vulnerDetails>
				<nonVulnerDetails>
					line 217
					watchdog('aggregation', 'aggregation has finished aggregating items from '.check_plain($feed->title));
					
					line 236
					watchdog('aggregation', check_plain($e->getMessage()), WATCHDOG_ERROR, l(t('view'), "node/$feed->nid"));
					
					line 607
					$params = array($node->original_author, $node->url, $node->username);
				
					if (trim($node->password) != '')
						$params[] = $node->password;
							
					$params += array(count($params) => $node->refresh_interval, 
						$node->title_as_guid_interval, $node->promote_to_frontpage, $node->item_categories, $node->time_to_live, $node->aggregation_feed_options, ($node->etag && $node->etag != '') ? $node->etag : '', 
						($node->last_modified && $node->last_modified != 0) ? $node->last_modified : 0,
						0, $node->nid);
					
					db_query("UPDATE {aggregation_feed} SET original_author = '%s', url = '%s', ".
						"username = '%s', ".(trim($node->password) != '' ? "password = '%s'," : '')." refresh_interval = %d, title_as_guid_interval = %d, ".
						"promote_to_frontpage = %d, item_categories = '%s', time_to_live = %d, aggregation_feed_options = '%s', ".
						"etag = '%s', last_modified = %d, last_refreshed = %d WHERE nid = %d", $params);
						
					line 640
					$allowed = NULL
					...
					if (user_access('manage feed items')) 
						$allowed = TRUE;
					else if (user_access('manage own feed items') && ($user->uid == $node->uid))
						$allowed = TRUE;
					...
					else if ($op == 'view' && user_access('view aggregation items')) 
						$allowed = TRUE;
						
					return $allowed;
					
					line 660
					'#title' => t(check_plain(node_get_types('type', 'aggregation_item')->title_label)),
					
					line 869
					$params = array($node->url, $node->original_author);
	
					if (!($node->story_guid === ''))
						$params[] = $node->story_guid;
						
					$params += array(count($params) => $node->fid, $node->image_id, $node->image_guid ? $node->image_guid : 0, $node->aggregation_item_options);
						
					if (!(trim($node->original_comments) == ''))
						$params[] = trim($node->original_comments);
						
					$params[] = $node->nid;
					...
					($node->story_guid === '' ? '' : "story_guid = '%s',")." fid = %d, image_id = %d, image_guid = '%s', aggregation_item_options = '%s' ".(trim($node->original_comments) == '' ? '' : ", original_comments = '%s'")." ".
					"WHERE nid = %d", $params);
					
					line 977
					<!-- return '<div class="aggregation_item_image"><img src="'.base_path().file_directory_path().'/'. -->
					
					line 1158
					watchdog('aggregation', t('Feed "@feed-title" was not modified since last refresh', array('@feed-title' => $feed->title)));
					
					line 1205
					watchdog('aggregation',t('Image with URL "@image-url" from feed "@feed_title" was not retrieved.', array('@image-url' => $image_array['url'], '@feed_title' => $feed->title)));
					...
					if (!$prexisting) watchdog('aggregation', t('Added item "@item-title" from feed "@feed-title"', array('@item-title' => $item_object->title, '@feed-title' => $feed->title)), WATCHDOG_NOTICE, l(t('view'), "node/$item_object->nid"));
					else watchdog('aggregation', t('Updated item "@item-title" from feed "@feed-title"', array('@item-title' => $item_object->title, '@feed-title' => $feed->title)), WATCHDOG_NOTICE, l(t('view'), "node/$item_object->nid"));
	
					line 1392
					$newfile = substr($image_array['url'], strrpos($image_array['url'], '/') + 1);
	
					$extension = explode('.', $newfile);
					$extension = strtolower($extension[count($extension) - 1]);

					$filename = $numeric_guid.".".$extension;
					...
					if (!($extension == 'jpg' || $extension == 'jpeg' || $extension == 'gif' || $extension == 'png'))
							throw new Exception('Invalid image extension', INCORRECT_IMAGE_FORMAT);
					...		
					if (file_put_contents(file_directory_path().'/'.$newfile, $data) == 0)
					...
					watchdog('aggregation', check_plain($e->getMessage()), WATCHDOG_ERROR);
					
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "application_top.php" code = "CVE-2006-4214" project = "zencart">
			<desc>
				<vulnerDetails>
					from zencart 1.3.0.0 
					line 83
					
					include($base_dir . $loader_file);
				</vulnerDetails>
				<nonVulnerDetails>
					$autoLoadConfig = array();
					include($base_dir . $loader_file);
					if ($loader_dir = dir(DIR_WS_INCLUDES . 'auto_loaders')) {
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "archive.php" code = "CVE-2007-4777, CVE-2007-4778" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.0
					
					filter parameter is unsanitized
				</vulnerDetails>
				<nonVulnerDetails>
					$filter	= $this->_db->Quote( '%'.$this->_db->getEscaped( $filter, true ).'%', false );
				
					info about getEscaped
					https://docs.joomla.org/API17:JDatabase::getEscaped
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "archive2010.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					$filter_order and $filter_order_Dir
				</vulnerDetails>
			</desc>
		</file>
		<file name = "banner.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					inputs passed via "filter_order" and "filter_order_Dir" are not verified before being sent to index.php
					
					$where		= count( $where ) ? ' WHERE ' . implode( ' AND ', $where ) : '';
					$orderby	= ' ORDER BY '. $filter_order .' '. $filter_order_Dir .', b.ordering';
					...
					$query = 'SELECT b.*, c.name AS client_name, cc.title AS category_name, u.name AS editor'
					. ' FROM #__banner AS b'
					. ' INNER JOIN #__bannerclient AS c ON c.cid = b.cid'
					. ' LEFT JOIN #__categories AS cc ON cc.id = b.catid'
					. ' LEFT JOIN #__users AS u ON u.id = b.checked_out'
					. $where
					. $orderby
					;
				</vulnerDetails>
			</desc>
		</file>
		<file name = "category.php" code = "CVE-2007-4777, CVE-2007-4778" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.0
					
					filter parameter is unsanitized
				</vulnerDetails>
				<nonVulnerDetails>
					$filter	= $this->_db->Quote( '%'.$this->_db->getEscaped( $filter, true ).'%', false );
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "category2010.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					$filter_order and $filter_order_Dir
				</vulnerDetails>
			</desc>
		</file>
		<file name = "class.tslib_pibase.php" code = "CVE-2009-4855" project = "typo3">
			<desc>
				<vulnerDetails>
					Showuid parameter may allow SQL injection.
				</vulnerDetails>
			</desc>
		</file>
		<file name = "class.tx_indexedsearch_modfunc2.php" code = "CVE-2007-6381" project = "typo3">
			<desc>
				<vulnerDetails>
					Used $HTTP_GET_VARS['id'] to retrieve id parameter.
					Used sprintf('pageid= %s '.$addwhere, $conf['bid']).
					The %s allowed any string input.
				</vulnerDetails>
				<nonVulnerDetails>
					Used intval(t3lib_div::_GET('id')) to retrieve id parameter.
					Used sprintf('pageid= %d '.$addwhere, $conf['bid']).
					The %d forced an integer input.
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "class-wp-xmlrpc-server.php" code = "CVE-2007-4894" project = "wordpress">
			<desc>
				<vulnerDetails>
					Bug fixed after 2.2.3
					pingback.extensions.getPingbacks() method, post_type parameter
					Link discusses function: https://developer.wordpress.org/reference/classes/wp_xmlrpc_server/pingback_extensions_getpingbacks/
				</vulnerDetails>
			</desc>
		</file>
		<file name = "client.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					inputs passed via "filter_order" and "filter_order_Dir" are not verified before being sent to index.php
					
					$where		= ( count( $where ) ? ' WHERE ' . implode( ' AND ', $where ) : '' );
					$orderby = ' ORDER BY '. $filter_order .' '. $filter_order_Dir .', a.cid';

					// get the total number of records
					$query = 'SELECT a.*, count(b.bid) AS nbanners, u.name AS editor'
					. ' FROM #__bannerclient AS a'
					. ' LEFT JOIN #__banner AS b ON a.cid = b.cid'
					. ' LEFT JOIN #__users AS u ON u.id = a.checked_out'
					. $where
					. ' GROUP BY a.cid'
					. $orderby
					;
				</vulnerDetails>
			</desc>
		</file>
		<file name = "comment.php" code = "CVE-2010-4257" project = "wordpress">
			<desc>
				<vulnerDetails>
					From version 2.9 of Wordpress. Bug fixed after 3.0.2
					$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET to_ping = TRIM(REPLACE(to_ping, '$tb_ping', '')) WHERE ID = %d", $post_id) );
				</vulnerDetails>
				<nonVulnerDetails>
					Fixed version after 3.0.2
					$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET to_ping = TRIM(REPLACE(to_ping, %s, '')) WHERE ID = %d", $tb_ping, $post_id) );
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "controller.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					inputs passed via "filter_order" and "filter_order_Dir" are not verified before being sent to index.php
					
					$orderby = ' ORDER BY '. $filter_order .' '. $filter_order_Dir .', sectname, cc.name, c.ordering';
					...
					$query = 'SELECT c.*, g.name AS groupname, cc.name, v.name AS author, s.title AS sectname' .
					' FROM #__content AS c' .
					' LEFT JOIN #__categories AS cc ON cc.id = c.catid' .
					' LEFT JOIN #__sections AS s ON s.id = c.sectionid' .
					' LEFT JOIN #__groups AS g ON g.id = c.access' .
					' LEFT JOIN #__users AS v ON v.id = c.created_by' .
					$where .
					$orderby;
				</vulnerDetails>
			</desc>
		</file>
		<file name = "database.inc" code = "CVE-2008-3223" project = "drupal">
			<desc>
				<vulnerDetails>
					line 202
					function _db_query_callback($match, $init = FALSE)
					(no case for %n)
					
					line 246
					define('DB_QUERY_REGEXP', '/(%d|%s|%%|%f|%b)/');
					
					line 585
					return '\'%s\'';
					...
					case 'numeric':
						// For 'numeric' values, we use '%s', not '\'%s\'' as with
						// string types, because numeric values should not be enclosed
						// in quotes in queries (though they can be, at least on mysql
						// and pgsql).  Numerics should only have [0-9.+-] and
						// presumably no db's "escape string" function will mess with
						// those characters.
				  return '%s';
				</vulnerDetails>
				<nonVulnerDetails>
					line 202
					(added case for %n)
					case '%n':
					  // Numeric values have arbitrary precision, so can't be treated as float.
					  // is_numeric() allows hex values (0xFF), but they are not valid.
					  $value = trim(array_shift($args));
					  return is_numeric($value) && !preg_match('/x/i', $value) ? $value : '0';
					
					line 246
					define('DB_QUERY_REGEXP', '/(%d|%s|%%|%f|%b|%n)/');
					
					line 585
					return "'%s'"
					...
					case 'numeric':
					  // Numeric values are arbitrary precision numbers.  Syntacically, numerics
					  // should be specified directly in SQL. However, without single quotes
					  // the %s placeholder does not protect against non-numeric characters such
					  // as spaces which would expose us to SQL injection.
					  return '%n';	
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "database_sqlsrv.inc" code = "CVE-2015-7876" project = "drupal">
			<desc>
				<vulnerDetails>
					from drupal 7 driver for SQL Server and SQL Azure
					
					public function escapeLike($string) {
						return addcslashes($string, '\%_[]');
					}
					
					public function mapConditionOperator($operator) {
					 // SQL Server doesn't need special escaping for the \ character in a string
				     // literal, because it uses '' to escape the single quote, not \'. Sadly
				     // PDO doesn't know that and interpret \' as an escaping character. We
				     // use a function call here to be safe.
					 static $specials = array(
				       'LIKE' => array('postfix' => " ESCAPE CHAR(92)"),
				       'NOT LIKE' => array('postfix' => " ESCAPE CHAR(92)"),
					 );
					 return isset($specials[$operator]) ? $specials[$operator] : NULL;
				   }
				</vulnerDetails>
				<nonVulnerDetails>
					public function escapeLike($string) {
						return preg_replace('/([\\[\\]%_])/', '[$1]', $string);
					}
					
					public function mapConditionOperator($operator) {
					 // SQL Server doesn't need special escaping for the \ character in a string
				     // literal, because it uses '' to escape the single quote, not \'.
					 static $specials = array(
				       'LIKE' => array(),
						'NOT LIKE' => array(),
					 );
					 return isset($specials[$operator]) ? $specials[$operator] : NULL;
				   }
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "database2014a.inc" code = "CVE-2014-3704" project = "drupal">
			<desc>
				<vulnerDetails>
					from drupal 7.31
					calls the vulnerable expandArguments($query, $args), declared in database2014b.inc
				</vulnerDetails>
			</desc>
		</file>
		<file name = "database2014b.inc" code = "CVE-2014-3704" project = "drupal">
			<desc>
				<vulnerDetails>
					from drupal 7.31
					
					$new_keys = array();
					foreach ($data as $i => $value) {
					   // This assumes that there are no other placeholders that use the same
					   // name.  For example, if the array placeholder is defined as :example
					   // and there is already an :example_2 placeholder, this will generate
					   // a duplicate key.  We do not account for that as the calling code
					   // is already broken if that happens.
					   $new_keys[$key . '_' . $i] = $value;
					}
					
					explanation
					array may contain keys that are not integers
					https://packetstormsecurity.com/files/128721/Drupal-7.31-SQL-Injection.html
				</vulnerDetails>
				<nonVulnerDetails>
					$new_keys = array();
					foreach (array_values($data) as $i => $value) {
					  // This assumes that there are no other placeholders that use the same
					  // name.  For example, if the array placeholder is defined as :example
					  // and there is already an :example_2 placeholder, this will generate
					  // a duplicate key.  We do not account for that as the calling code
					  // is already broken if that happens.
					  $new_keys[$key . '_' . $i] = $value;
					}

				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "DB_active_rec.php" code = "CVE-2015-5725" project = "codeigniter">
			<desc>
				<vulnerDetails>
					line 898
				
					$this->ar_offset = $offset;
				</vulnerDetails>
				<nonVulnerDetails>
					$this->ar_offset = (int) $offset;
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "element.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					inputs passed via "filter_order" and "filter_order_Dir" are not verified before being sent to index.php
					
					$order = ' ORDER BY '. $filter_order .' '. $filter_order_Dir .', section_name, cc.name, c.ordering';
					...
					$query = 'SELECT c.*, g.name AS groupname, cc.title as cctitle, u.name AS editor, f.content_id AS frontpage, s.title AS section_name, v.name AS author' .
					' FROM #__content AS c' .
					' LEFT JOIN #__categories AS cc ON cc.id = c.catid' .
					' LEFT JOIN #__sections AS s ON s.id = c.sectionid' .
					' LEFT JOIN #__groups AS g ON g.id = c.access' .
					' LEFT JOIN #__users AS u ON u.id = c.checked_out' .
					' LEFT JOIN #__users AS v ON v.id = c.created_by' .
					' LEFT JOIN #__content_frontpage AS f ON f.content_id = c.id' .
					$where .
					$order;
				</vulnerDetails>
			</desc>
		</file>
		<file name = "fim_rss.php" code = "CVE-2008-0491" project = "wordpress">
			<NOTE>Was not able to retrieve whole code</NOTE>
			<desc>
				<vulnerDetails>
					Retrieved from fgallery plugin before 2.4.1.
				</vulnerDetails>
			</desc>
		</file>
		<file name = "history.php" code = "CVE-2008-0491" project = "joomla">
			<desc>
				<vulnerDetails>
					From Joomla 3.3.0
					
					vulnerable in getListQuery() function
					
					$query->select(
						$this->getState(
							'list.select',
							'h.version_id, h.ucm_item_id, h.ucm_type_id, h.version_note, h.save_date, h.editor_user_id,' .
							'h.character_count, h.sha1_hash, h.version_data, h.keep_forever'
						)
					)
					
					For more details
					https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/joomla-sql-injection-vulnerability-exploit-results-in-full-administrative-access/
				</vulnerDetails>
			</desc>
		</file>
		<file name = "kb.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from fully-modded-phpbb
					
					if mode is set to article and page_num is enabled, attack SQL statements can be sent
					to kb.php w/ the "k" parameter
				</vulnerDetails>
			</desc>
		</file>
		<file name = "list.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					inputs passed via "filter_order" and "filter_order_Dir" are not verified before being sent to index.php
					
					$orderby = ' ORDER BY '.$filter_order .' '. $filter_order_Dir .', m.parent, m.ordering';
					...
					$query = 'SELECT m.*, u.name AS editor, g.name AS groupname, c.publish_up, c.publish_down, com.name AS com_name' .
					' FROM #__menu AS m' .
					' LEFT JOIN #__users AS u ON u.id = m.checked_out' .
					' LEFT JOIN #__groups AS g ON g.id = m.access' .
					' LEFT JOIN #__content AS c ON c.id = m.componentid AND m.type = "content_typed"' .
					' LEFT JOIN #__components AS com ON com.id = m.componentid AND m.type = "component"' .
					' WHERE m.menutype = '.$db->Quote($menutype) .
					' AND m.published != -2' .
					$and .
					$orderby;
				</vulnerDetails>
			</desc>
		</file>
		<file name = "locale.inc" code = "CVE-2008-3223" project = "drupal">
			<desc>
				<vulnerDetails>
					line 927 
					function locale_translate_delete($lid) modified
				</vulnerDetails>
				<nonVulnerDetails>
					https://www.drupal.org/files/sa-2008-044/SA-2008-044-6.2.patch
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "openid.pages.inc" code = "CVE-2008-3223" project = "drupal">
			<desc>
				<vulnerDetails>
					from Drupal 6.2
					
					line 44
					$rows[] = array($identity->authname, l(t('Delete'), 'user/'. $account->uid .'/openid/delete/'. $identity->aid));
					
					line 90
					function openid_user_delete($account, $aid = 0) {
  					db_query("DELETE FROM {authmap} WHERE uid=%d AND aid=%d AND module='openid'", $account->uid, $aid);
				</vulnerDetails>
				<nonVulnerDetails>
					$rows[] = array(check_plain($identity->authname), l(t('Delete'), 'user/'. $account->uid .'/openid/delete/'. $identity->aid));
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "ot_coupon.php" code = "CVE-2006-4214" project = "zencart">
			<desc>
				<vulnerDetails>
					from zencart 1.3.0.0 
					line 104-108
					
					$coupon_result=$db->Execute("select coupon_id, coupon_amount, coupon_type, coupon_minimum_order,
										 uses_per_coupon, uses_per_user, restrict_to_products,
										 restrict_to_categories from " . TABLE_COUPONS . "
									   where coupon_code='". $_POST['dc_redeem_code']."'
									   and coupon_active='Y'");
				</vulnerDetails>
				<nonVulnerDetails>
					$sql = "select coupon_id, coupon_amount, coupon_type, coupon_minimum_order, uses_per_coupon, uses_per_user,
							restrict_to_products, restrict_to_categories 
							from " . TABLE_COUPONS . "
							where coupon_code= :couponCodeEntered
							and coupon_active='Y'";
					$sql = $db->bindVars($sql, ':couponCodeEntered', $_POST['dc_redeem_code'], 'string'); 

					$coupon_result=$db->Execute($sql);
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "page_header.php" code = "CVE-2003-1244" project = "phpbb">
			<desc>
				<vulnerDetails>
					from phpbb 2.0.0
					
					user inputs not sufficiently sanitized
				<vulnerDetails>
			</desc>
		</file>
		<file name = "password_forgotten.php" code = "CVE-2005-3996" project = "zencart">
			<desc>
				<vulnerDetails>
					from zencart 1.2.0d
					
					admin_email parameter from user input is not validated.
					"can be exploited regardless of the magic_quotes_gpc setting"
					
					$admin_email = zen_db_prepare_input($_POST['admin_email']);
					$sql = "select admin_id, admin_name, admin_email, admin_pass from " . TABLE_ADMIN . " where admin_email = '" . $admin_email . "'";
				<vulnerDetails>
			</desc>
		</file>
		<file name = "paypal_functions.php" code = "CVE-2006-4214" project = "zencart">
			<desc>
				<vulnerDetails>
					from zencart 1.3.0.0 
					line 35
					
					$sql = "select * from " . TABLE_PAYPAL_SESSION . " where session_id = '" . $session_stuff[1] . "'";
				</vulnerDetails>
				<nonVulnerDetails>
					$sql = "SELECT * 
						FROM " . TABLE_PAYPAL_SESSION . " 
						WHERE session_id = :sessionID";
					$sql = $db->bindVars($sql, ':sessionID', $session_stuff[1], 'string');
				</nonVulnerDetails>
			</desc>
	    </file>
		<file name = "privmsg.php" code = "CVE-2003-1530" project = "phpbb">
			<desc>
				<vulnerDetails>
					from phpbb 2.0.0
					
					function for deleting private messages not sanitized
					sid seems to be the vulnerable parameter
				<vulnerDetails>
			</desc>
		</file>
		<file name = "redirect.php" code = "CVE-2012-1116" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.7.0
					
					$db->setQuery(
						'SELECT `new_url`, `published`' .
						' FROM `#__redirect_links`' .
						' WHERE `old_url` = '.$db->quote($current),
						0, 1
					);
				</vulnerDetails>
			</desc>
		</file>
		<file name = "search.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					inputs passed via "filter_order" and "filter_order_Dir" are not verified before being sent to index.php
					
					$orderby 	= ' ORDER BY '. $filter_order .' '. $filter_order_Dir .', hits DESC';
					...
					$query = ' SELECT * '
					. ' FROM #__core_log_searches '
					. $where
					. $orderby;
				</vulnerDetails>
			</desc>
		</file>
		<file name = "section.php" code = "CVE-2007-4777, CVE-2007-4778" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.0
					
					filter parameter is unsanitized
				</vulnerDetails>
				<nonVulnerDetails>
					$filter	= $this->_db->Quote( '%'.$this->_db->getEscaped( $filter, true ).'%', false );
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "category2010.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					$filter_order and $filter_order_Dir
				</vulnerDetails>
			</desc>
		</file>
		<file name = "settings.php" code = "CVE-2015-2090" project = "wordpress">
			<desc>
				<vulnerDetails>
					retrieved from wordpress survey and poll plugin
					ajax_survey() function is unsafe
					survey_id variable is not sanitized
				</vulnerDetails>
			</desc>
		</file>
		<file name = "shopping_cart.php" code = "CVE-2006-4214" project = "wordpress">
			<desc>
				<vulnerDetails>
					from zencart 1.3.0.0 
					line 354
					
					set customers_basket_quantity = '" . $quantity . "'
				</vulnerDetails>
				<nonVulnerDetails>
					set customers_basket_quantity = '" . (float)$quantity . "'
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "taxonomy.module" code = "CVE-2007-6299" project = "drupal">
			<desc>
				<vulnerDetails>
					taxonomy_select_nodes() lines 1109-1148
					directly injects variables into queries instead of using placeholders
				</vulnerDetails>
				<nonVulnerDetails>
					This file itself validates inputs passed to taxonomy_select_nodes()
					However, many modules directly pass user input to the function
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "taxonomy.php" code = "CVE-2011-3130" project = "wordpress">
			<desc>
				<vulnerDetails>
					From version 2.9 of Wordpress. Bug fixed after 3.1.3
					Unknown error
				</vulnerDetails>
			</desc>
		</file>
		<file name = "user.module" code = "CVE-2008-3223" project = "drupal">
			<desc>
				<vulnerDetails>
					from Drupal 6.2
					
					user_module_invoke('login', $edit, $user);
				</vulnerDetails>
				<nonVulnerDetails>
					// Regenerate the session ID to prevent against session fixation attacks.
				    sess_regenerate();
				    user_module_invoke('login', $edit, $user);
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "weblink.php" code = "CVE-2010-4696" project = "joomla">
			<desc>
				<vulnerDetails>
					from joomla 1.5.3
					
					inputs passed via "filter_order" and "filter_order_Dir" are not verified before being sent to index.php
				</vulnerDetails>
			</desc>
		</file>
		<file name = "whos_online.php" code = "CVE-2006-4214" project = "zencart">
			<desc>
				<vulnerDetails>
					from zencart 1.3.0.2 
					line 101
					
					set session_id = '" . $new_session . "' WHERE session_id = '" . $old_session . "'";
				</vulnerDetails>
				<nonVulnerDetails>
					SET session_id = :newSessionID 
					WHERE session_id = :oldSessionID";
				$sql = $db->bindVars($sql, ':newSessionID', $new_session, 'string'); 
				$sql = $db->bindVars($sql, ':oldSessionID', $old_session, 'string');
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "wp-blog-header.php" code = "CVE-2003-1598" project = "wordpress">
			<desc>
				<vulnerDetails>
					$posts parameter may lead to SQL injection.
					Note the use of query_posts. This is a function in Wordpress.
					query_posts seems to concatenate variables in to strings if passed without quotes
					https://developer.wordpress.org/reference/functions/query_posts/ (section is Passing Variables to Query_posts)
				</vulnerDetails>
			</desc>
		</file>
		<file name = "wp-config.php" code = "CVE-2008-0616" project = "wordpress">
			<NOTE>Was not able to retrieve whole code</NOTE>
			<desc>
				<vulnerDetails>
					Retrieved from dmsguestbook before 1.7.0.
					$_REQUEST[folder] and $_REQUEST[file] not checked.
				</vulnerDetails>
			</desc>
		</file>
		<file name = "wp-db.php" code = "CVE-2007-6318" project = "wordpress">
			<desc>
				<vulnerDetails>
					Retrieved from version 1.5. Fixed after 2.3.1
					escape() function, which uses addslashes() function is the issue.
					addslashes() blindly places backslash before any single quote
				</vulnerDetails>
			</desc>
		</file>
		<file name = "xmlrpc.php" code = "CVE-2007-1897" project = "wordpress">
			<desc>
				<vulnerDetails>
					From version 1.5 of Wordpress. Bug fixed after 2.1.3
					mt.setPostCategories method may allow SQL injection. Has to do with postid variable, which accepts strings
				</vulnerDetails>
				<nonVulnerDetails>
					Fixed version on branch 2.1. sets postid to an int.
					Maybe check if variable with the name "id" have an "int" cast
					wp_set_post_cats function became deprecated and was replaced with wp_set_post_categories()
				</nonVulnerDetails>
			</desc>
		</file>
	</vulnerableFiles>
	<nonVulnerableFiles>
		<file name = "class-bulk-editor-list-table.php" code = "CVE-2015-2292" project = "wordpress">
			<desc>
				<vulnerDetails>
					$orderby = ! empty( $_GET['orderby'] ) ? esc_sql( sanitize_text_field($_GET['orderby'] ) ) : 'post_title';
					
					order = esc_sql( strtoupper( sanitize_text_field( $_GET['order'] ) ) );
					
					if GET orderby parameter is not empty, it passes its value to WordPress' esc_sql() fn
					esc_sql() prepares a string as an SQL query. It works like an addslashes() that can work w/ arrays
					However, SQL injections are still possible.
				<vulnerDetails>
				<nonVulnerDetails>
					downloaded master branch for WordPress SEO plugin
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "class-wp-query.php" code = "CVE-2017-5611" project = "wordpress">
			<desc>
				<vulnerDetails>
					$where .= " AND {$wpdb->posts}.post_type IN ('" . join("', '", $in_search_post_types ) . "')";
					
					$where .= " AND {$wpdb->posts}.post_type IN ('" . join("', '", $post_type) . "')";
					
					$where .= " AND {$wpdb->posts}.post_type = '$post_type'";
				<vulnerDetails>
				<nonVulnerDetails>
					modified lines 2260-2265
					
					Ensure that queries work correctly with post type names with special characters.
					
					$where .= " AND {$wpdb->posts}.post_type IN ('" . join( "', '", array_map( 'esc_sql', $in_search_post_types ) ) . "')";
					
					$where .= " AND {$wpdb->posts}.post_type IN ('" . join("', '", esc_sql( $post_type ) ) . "')";
					
					$where .= $wpdb->prepare( " AND {$wpdb->posts}.post_type = %s", $post_type );
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "db.php" code = "CVE-2017-14723" project = "wordpress">
			<NOTE>may still be vulner according to CVE-2017-16510</NOTE>
			<desc>
				<nonVulnerDetails>
					test file for wpdb::prepare() fn
					wpdb::prepare() sets up SQL queries, and assertEquals is used to insure they are set up correctly
					Second commit adds a test w/ unescaped percents
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "feedwordpresssyndicationpage.class.php" code = "CVE-2015-4018" project = "wordpress">
			<desc>
				<vulnerDetails>
					$targets = $wpdb->get_results("
						SELECT * FROM $wpdb->links
						WHERE link_id IN (".implode(",",$_POST['link_ids']).")
					");
				<vulnerDetails>
				<nonVulnerDetails>
					POST parameter link_ids[] was originally vulnerable
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "formatting.php" code = "CVE-2007-6318" project = "wordpress">
			<desc>
				<nonVulnerDetails>
					Retrieved from 2.9
					Declares addslashes_gpc fn, which replaces the use of addslashes.
					Takes in result string from HTTP request
					Returns a string escaped with slashes, using the esc_sql function
					Use character sets not vulnerable to SQL injection, like UTF-8
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "meta.php" code = "CVE-2017-16510" project = "wordpress">
			<desc>
				<nonVulnerDetails>
					lines 367-372 are changed.
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "post.php" code = "CVE-2015-2213" project = "wordpress">
			<desc>
				<vulnerDetails>
					$comments_in = implode( "', '", $comments );
					$wpdb->query( "UPDATE $wpdb->comments SET comment_approved = '$status' WHERE comment_ID IN ('" . $comments_in . "')" );
				<vulnerDetails>
				<nonVulnerDetails>
					changed lines are 2908-2912
					comment: "IDs are integers"
					$comments_in = implode( ', ', array_map( 'intval', $comments ) );
					$wpdb->query( $wpdb->prepare( "UPDATE $wpdb->comments SET comment_approved = %s WHERE comment_ID IN ($comments_in)", $status ) );
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "query.php" code = "CVE-2007-6318" project = "wordpress">
			<desc>
				<nonVulnerDetails>
					Retrieved from 2.9
					Utilizes addslashes_gpc fn
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "videogalleryrss.php" code = "CVE-2015-2065" project = "wordpress">
			<desc>
				<vulnerDetails>
					$vid             = filter_input(INPUT_GET,'vid');  
				<vulnerDetails>
				<nonVulnerDetails>
					From contus-video-gallery wordpress plugin
					$vid             = intval(filter_input(INPUT_GET,'vid')); 
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "wp-db.php" code = "CVE-2017-14723" project = "wordpress">
			<NOTE>may still be vulner according to CVE-2017-16510</NOTE>
			<desc>
				<vulnerDetails>
					old code allowed passing of array as parameter, and other values can be passed as well
				<vulnerDetails>
				<nonVulnerDetails>
					declaration of the wpdb::prepare() function
					adds code to ignore additional parameters passed into the array
					adds code to support %s, %d, %f placeholders in query string.
					Other non-escaped % will be skipped
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "wp-dbV2.php" code = "CVE-2017-16510" project = "wordpress">
			<desc>
				<nonVulnerDetails>
					later version of wp-db.php
				</nonVulnerDetails>
			</desc>
		</file>
		<file name = "wp-users.php" code = "CVE-2011-4669" project = "wordpress">
			<desc>
				<nonVulnerDetails>
					From a wordpress plugin
					Changes to vulner code can be found here: 
					https://plugins.trac.wordpress.org/changeset/448261/wordpress-users
				</nonVulnerDetails>
			</desc>
		</file>
	</nonVulnerableFiles>
</files>