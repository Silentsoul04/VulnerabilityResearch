'''test linear classifier to gain a better understanding'''
'''based off FashionMNIST code in Udacity intro to PyTorch'''
import torch
from torchvision import datasets, transforms
import helper
from torch import nn, optim
import torch.nn.functional as F

from vulnerabilityDataset import VulnerabilityDataset
import csvWrite


class Classifier(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(17, 10)
        self.fc2 = nn.Linear(10, 5)
        self.fc3 = nn.Linear(5, 2)

        #dropout to help prevent overfitting
        self.dropout = nn.Dropout(p=0.2)
        
    def forward(self, x):
        # make sure input tensor is flattened
        x = x.view(x.shape[0], -1)
        
        x = self.dropout(F.relu(self.fc1(x)))
        x = self.dropout(F.relu(self.fc2(x)))
        x = F.log_softmax(self.fc3(x), dim=1)
        
        return x

csvDirectory = csvWrite.getCSVDirectory()

transform = transforms.Compose([transforms.ToTensor()])

# Download and load the training data
trainset = VulnerabilityDataset(csv_file=csvDirectory, transform=transform) #datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=len(trainset), shuffle=True)

# Download and load the test data
testset = VulnerabilityDataset(csv_file=csvDirectory, transform=transform) #datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=False, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=len(testset), shuffle=True)

# Create the network, define the criterion and optimizer
model = Classifier()
criterion = nn.NLLLoss()
optimizer = optim.Adam(model.parameters(), lr=0.003)

# Train the network here
epochs = 5

for e in range(epochs):
    running_loss = 0
    for data, labels in trainloader:
        log_ps = model(data)
        loss = criterion(log_ps, labels)
        
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        running_loss += loss.item()
    else:
        print(f"Training loss: {running_loss/len(trainloader)}")

if __name__ == "__main__":
    pass
    '''csvDirectory = csvWrite.getCSVDirectory()

    data_frame = pd.read_csv(csvDirectory)
    name1 = data_frame.iloc[0, 0]

    #get names in numpy-array
    names = data_frame.iloc[0:, 0].as_matrix()

    print("name1:", name1)
    print(names)

    #load vulnerability file dataset
    fileDataset = VulnerabilityDataset(csv_file=csvDirectory)
    fig=plt.figure()

    for i in range(len(fileDataset)):
        sample = fileDataset[i]
        print(i, sample.shape, sample)

        ax = plt.subplot(1, 4, i + 1)
        plt.tight_layout()
        ax.set_title('Sample #{}'.format(i))
        ax.axis('off')

        if i == 3:
            plt.show()
            break'''
                
