'''building a tensorflow classifier'''
import tensorflow as tf
import pandas as pd
import numpy as np
import csvWrite

'''
input > weight > hidden layer 1 (activation function) > weights >
hidden layer 2 (activation function) > weights > output layer

compare output to intended output, using cost (cross entropy) function
optimization function (optimizer) to minimize cost. Using AdamOptimizer

backpropagation

feed forward + backprop = epoch
'''

'''from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets("/tmp/data/", one_hot=True)

#nodes for hidden layers
n_node_hl1 = 500
n_node_hl2 = 500
n_node_hl3 = 500

#mnist has ten classes, 0-9
n_classes = 10
batch_size = 100 #batches of 100

print(type(mnist))'''

def rewriteCSV():
    userInput = input("Rewrite csv? (y/n) ")
    if userInput == 'y':
        csvWrite.createDataSet()
        print("Data set recreated")

def createTrainingData():
    csvDirectory = csvWrite.getCSVDirectory()
    data_frame = pd.read_csv(csvDirectory)
    data_frame = data_frame.drop(columns=['File Name', 'Vulnerable']) #remove file name and vulnerable columns
    print("pandas dataframe shape: ", data_frame.shape)

    #convert pandas dataframe to numpy ndarray
    data_frame = data_frame.values

    #convert numpy array to tensor
    tens = tf.convert_to_tensor(data_frame, dtype=tf.int32)
    print("tensor shape: ", tens.shape)

    #return tensorflow tensor
    return tens

def createTrainingDataNumpy():
    csvDirectory = csvWrite.getCSVDirectory()
    data_frame = pd.read_csv(csvDirectory)
    vulnerableList = data_frame[data_frame.columns[1:2]] #get list of vulnerable characteristics
    data_frame = data_frame.drop(columns=['File Name', 'Vulnerable']) #remove file name and vulnerable columns
    print("pandas dataframe shape: ", data_frame.shape)

    #convert pandas dataframe to numpy ndarray
    data_frame = data_frame.values
    vulnerableList = vulnerableList.values

    fullVulnerableList = np.empty(vulnerableList.shape)
    for vulnerValue in vulnerableList:
        if vulnerValue[0] == 0:
            vulnerValue = np.append(vulnerValue, 1) #vulnerValue.append(1) #vulnerValue[1] means nonvulnerable
        else:
            vulnerValue = np.append(vulnerValue, 0) #vulnerValue.append(0)
        np.append(fullVulnerableList, vulnerValue)

    print(data_frame)
    print(fullVulnerableList)

    features = []
    for featureList in data_frame:
        collectiveList = []
        collectiveList.append(featureList)
        
        print(type(featureList))
        print(featureList)
        break

    return data_frame

if __name__ == "__main__":
    #rewriteCSV()

    dataSet = createTrainingDataNumpy()
    print(dataSet.shape)

    test_size = 0.1

    testing_size = int(test_size*len(dataSet))

    #train_x = list(dataSet[])

    #dataSet2 = csvWrite.getCSVRows()
    #print(dataSet2)
    

    #probably want (1, 17) shape and then place them all in a list, like in the sentdex vid
