import torch
import torch.nn as nn
import torch.nn.functional as F


class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        # 1 input image channel, 6 output channels, 5x5 square convolution
        # kernel
        self.conv1 = nn.Conv2d(in_channels = 1, out_channels = 6, kernel_size = 5)
        self.conv2 = nn.Conv2d(in_channels = 6, out_channels = 16, kernel_size = 5)
        # an affine operation: y = Wx + b
        self.fc1 = nn.Linear(in_features = 16 * 5 * 5, out_features = 120)
        self.fc2 = nn.Linear(in_features = 120, out_features = 84)
        self.out = nn.Linear(in_features = 84, out_features = 2)
        #out_features 2 are vulnerable/nonvulnerable

    def forward(self, t): # t is a tensor
        #implement forward pass
        #FIXME: implement passes to conv layers
        #should 1d pools be used?
        t = F.max_pool2d(F.relu(self.conv1(t)), (2, 2))
        t = F.max_pool2d(F.relu(self.conv2(t)), 2)
        t = t.view(-1, self.num_flat_features(t))

        #passes to linear layers
        t = F.relu(self.fc1(t))
        t = F.relu(self.fc2(t))
        t = self.out(t)
        
        return t

    def num_flat_features(self, t):
        size = t.size()[1:]  # all dimensions except the batch dimension
        num_features = 1
        for s in size:
            num_features *= s
        return num_features

network = CNN()
print(network.conv1.weight)
print(network.conv1.weight.shape)

invalues = torch.randn(1, 1, 32, 32)
out = network(invalues)
print(out)
