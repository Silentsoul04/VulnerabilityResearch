'''building a tensorflow classifier'''
import tensorflow as tf
import pandas as pd
import numpy as np
import csvWrite
from sklearn.model_selection import train_test_split
import random

def rewriteCSV():
    userInput = input("Rewrite csv? (y/n) ")
    if userInput == 'y':
        csvWrite.createDataSet()
        print("Data set recreated")

def createTrainingData(split_test_size):
    csvDirectory = csvWrite.getCSVDirectory()
    data_frame = pd.read_csv(csvDirectory)

    feature_col_names = csvWrite.getRowHeaders()
    feature_col_names = feature_col_names[2:] #all except name and vulnerable column

    predicted_class_names = ['Vulnerable']

    X = data_frame[feature_col_names].values # predictor feature columns (17 x m)
    y = data_frame[predicted_class_names].values # predicted class (1=true, 0=false)(1 x m)

    #random.shuffle(X)
    #random.shuffle(y)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=split_test_size, random_state=42)
    return X_train, X_test, y_train, y_test



#rewriteCSV()

X_train, X_test, y_train, y_test = createTrainingData(0.3)
print("X_train", X_train)
print("X_test", X_test)
print("y_train", y_train)
print("y_test", y_test)

n_nodes_hl1 = 500
n_nodes_hl2 = 500
n_nodes_hl3 = 500

n_classes = 2 #should this be 2 (Vulnerable, nonVulner) or 1?
batch_size = 100

x = tf.placeholder('float', [None, len(X_train[0])])
y = tf.placeholder('float')

'''hidden_1_layer = {'weights':tf.Variable(tf.random_normal([len(X_train[0]), n_nodes_hl1])), 'biases':tf.Variable(tf.random_normal([n_nodes_hl1]))}

hidden_2_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl1, n_nodes_hl2])), 'biases':tf.Variable(tf.random_normal([n_nodes_hl2]))}

hidden_3_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl2, n_nodes_hl3])), 'biases':tf.Variable(tf.random_normal([n_nodes_hl3]))}

output_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl3, n_classes])), 'biases':tf.Variable(tf.random_normal([n_classes])),}'''

def neural_network_model(data):
    hidden_1_layer = {'weights':tf.Variable(tf.random_normal([len(X_train[0]), n_nodes_hl1])),
                      'biases':tf.Variable(tf.random_normal([n_nodes_hl1]))}

    hidden_2_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl1, n_nodes_hl2])),
                      'biases':tf.Variable(tf.random_normal([n_nodes_hl2]))}

    hidden_3_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl2, n_nodes_hl3])),
                      'biases':tf.Variable(tf.random_normal([n_nodes_hl3]))}

    output_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl3, n_classes])),
                    'biases':tf.Variable(tf.random_normal([n_classes])),}

    l1 = tf.add(tf.matmul(data,hidden_1_layer['weights']), hidden_1_layer['biases'])
    l1 = tf.nn.relu(l1)

    l2 = tf.add(tf.matmul(l1,hidden_2_layer['weights']), hidden_2_layer['biases'])
    l2 = tf.nn.relu(l2)

    l3 = tf.add(tf.matmul(l2,hidden_3_layer['weights']), hidden_3_layer['biases'])
    l3 = tf.nn.relu(l3)

    output = tf.matmul(l3,output_layer['weights']) + output_layer['biases']

    return output

def train_neural_network(x):
    prediction = neural_network_model(x)
    cost = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits=prediction,labels=y) )
    optimizer = tf.train.AdamOptimizer(learning_rate=0.001).minimize(cost)

    hm_epochs = 10
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())

        for epoch in range(hm_epochs):
            epoch_loss = 0
            i=0
            while i < len(X_train):
                start = i
                end = i+batch_size
                batch_x = np.array(X_train[start:end])
                batch_y = np.array(y_train[start:end])

                _, c = sess.run([optimizer, cost], feed_dict={x: batch_x, y: batch_y})
                epoch_loss += c

                i+=batch_size

            print('Epoch', epoch+1, 'completed out of',hm_epochs,'loss:',epoch_loss)

        correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))
        accuracy = tf.reduce_mean(tf.cast(correct, 'float'))

        print('Accuracy:',accuracy.eval({x:X_test, y:y_test}))

train_neural_network(x)

    

    

    
    
