import os
from file import *
import random
import shutil
import environmentVariables

'''gets all files'''

def hasCorrectExtension(file):
    '''checks for php files'''
    if file.endswith(".php") or file.endswith(".inc") or file.endswith(".module") or file.endswith(".jsp"):
        return True
    else:
        return False

def getFileSet(fileTypes):
    '''grabs the file set from vulnerable and nonvulnerable folders'''
    '''int fileTypes: 0 for own file, 1 for juliet files, 2 for hybrid'''
    #get current directory
    #dir_path = os.path.abspath(os.curdir)
    #print(dir_path)
    owd = os.getcwd()

    #go up one directory
    os.chdir("..")
    dir_path = os.path.abspath(os.curdir)
    #print(dir_path)

    #go into FileSet directory
    fileList = []
    if fileTypes == 0:
        dir_path = os.path.join(dir_path, "FileSet")
        print(dir_path)
        fileList = getFiles(dir_path)
    elif fileTypes == 1:
        dir_path = os.path.join(dir_path, "julietFiles")
        print(dir_path)
        fileList = getFiles(dir_path)
    elif fileTypes == 2:
        original_dir_path = dir_path
        dir_path = os.path.join(dir_path, "FileSet")
        print(dir_path)
        fileList1 = getFiles(dir_path)
        dir_path = os.path.join(original_dir_path, "julietFiles")
        print(dir_path)
        fileList2 = getFiles(dir_path)

        fileList = fileList1 + fileList2
    elif fileTypes == 3:
        dir_path = os.path.join(dir_path, "FullFileSet")
        print(dir_path)
        fileList = getFiles(dir_path)

    '''#parse through FileSet
    for root, dirs, files in os.walk(dir_path):
        for name in files:
            currentFile = os.path.join(root, name)
            if hasCorrectExtension(currentFile):
                newFile = File(currentFile, name)
                fileList.append(newFile)'''

    #change back to original working directory
    os.chdir(owd)

    #return list of File objects
    return fileList   

def getFiles(dir_path):
    #parse through FileSet
    fileList = []
    for root, dirs, files in os.walk(dir_path):
        for name in files:
            print("Currently on file called", name)
            currentFile = os.path.join(root, name)
            if hasCorrectExtension(currentFile):
                newFile = File(currentFile, name)
                fileList.append(newFile)
    return fileList

def oversampling(fileTypes):
    '''oversamples vulnerable files in given directory'''
    '''int fileTypes: 0 for own file, 1 for juliet files, 2 for hybrid'''
    #get current directory
    #dir_path = os.path.abspath(os.curdir)
    #print(dir_path)
    owd = os.getcwd()

    #go up one directory
    os.chdir("..")
    dir_path = os.path.abspath(os.curdir)
    #print(dir_path)

    #go into FileSet directory
    fileList = []
    if fileTypes == 0:
        dir_path = os.path.join(dir_path, "FileSet")
        print(dir_path)
        vulnerable_dir_path = os.path.join(dir_path, "Vulnerable")
        duplicateFiles(vulnerable_dir_path)
    elif fileTypes == 1:
        dir_path = os.path.join(dir_path, "julietFiles")
        print(dir_path)
        vulnerable_dir_path = os.path.join(dir_path, "Vulnerable")
        duplicateFiles(vulnerable_dir_path)
    elif fileTypes == 2:
        original_dir_path = dir_path
        dir_path = os.path.join(dir_path, "FileSet")
        print(dir_path)
        vulnerable_dir_path = os.path.join(dir_path, "Vulnerable")
        duplicateFiles(vulnerable_dir_path)
        
        dir_path = os.path.join(original_dir_path, "julietFiles")
        print(dir_path)
        vulnerable_dir_path = os.path.join(dir_path, "Vulnerable")
        duplicateFiles(vulnerable_dir_path)
    elif fileTypes == 3:
        dir_path = os.path.join(dir_path, "FullFileSet")
        print(dir_path)
        vulnerable_dir_path = os.path.join(dir_path, "Vulnerable")
        duplicateFiles(vulnerable_dir_path)

    #set oversampledDataSets variable to True (used)
    environmentVariables.oversampledDataSets[fileTypes] = True

    #change back to original working directory
    os.chdir(owd)

def duplicateFiles(fileDir, timesToDuplicate=20):
    #check if the directory already has duplicated files
    duplicateFileExists = duplicateFilesExist(fileDir)

    #duplicate files
    if not duplicateFileExists:
        for i in range(timesToDuplicate):
            for j in range(timesToDuplicate): #ex. if timesToDuplicate is 20, duplication happens 20x20 times
                #get array of all files in directory
                fileList = []
                for (dirpath, dirnames, filenames) in os.walk(fileDir):
                    fileList.extend(filenames)
                    break #break to only get top level dir

                chosenFileName = random.choice(fileList)
                newFileName = "duplicated_file_" + chosenFileName
                copy_rename(fileDir, chosenFileName, newFileName)
                

def duplicateFilesExist(fileDir):
    #boolean that checks if oversampling is already done
    duplicateFileExists = False
    
    '''for root, dirs, files in os.walk(fileDir):
        for name in files:
            if "duplicated_file_" in name:
                duplicateFileExists = True
                break'''
    duplicateDir = os.path.join(fileDir, "duplicated")
    if os.path.exists(duplicateDir):
        duplicateFileExists = True

    return duplicateFileExists

def copy_rename(fileDir, old_file_name, new_file_name):
    #src_dir= os.curdir
    #dst_dir= os.path.join(os.curdir , "subfolder")
    #dst_dir = os.curdir
    try:
        src_dir = fileDir
        dst_dir = os.path.join(fileDir , "duplicated")

        #if not os.path.exists('duplicated'):
        #    os.mkdir('duplicated')
        if not os.path.exists(dst_dir):
            os.mkdir(dst_dir)
        
        src_file = os.path.join(src_dir, old_file_name)
        shutil.copy(src_file,dst_dir)
        
        dst_file = os.path.join(dst_dir, old_file_name)
        new_dst_file_name = os.path.join(dst_dir, new_file_name)
        os.rename(dst_file, new_dst_file_name)
    except FileExistsError as f_err:
        copy_rename(fileDir, old_file_name, "a" + new_file_name)

def deleteDuplicateFiles(fileTypes):
    '''delete duplicate files after oversampling'''
    '''int fileTypes: 0 for own file, 1 for juliet files, 2 for hybrid'''
    #get current directory
    #dir_path = os.path.abspath(os.curdir)
    #print(dir_path)
    owd = os.getcwd()

    #go up one directory
    os.chdir("..")
    dir_path = os.path.abspath(os.curdir)
    #print(dir_path)

    #go into FileSet directory
    fileList = []
    if fileTypes == 0:
        dir_path = os.path.join(dir_path, "FileSet")
        print(dir_path)
        vulnerable_dir_path = os.path.join(dir_path, "Vulnerable")
        deleteFiles(vulnerable_dir_path)
    elif fileTypes == 1:
        dir_path = os.path.join(dir_path, "julietFiles")
        print(dir_path)
        vulnerable_dir_path = os.path.join(dir_path, "Vulnerable")
        deleteFiles(vulnerable_dir_path)
    elif fileTypes == 2:
        original_dir_path = dir_path
        dir_path = os.path.join(dir_path, "FileSet")
        print(dir_path)
        vulnerable_dir_path = os.path.join(dir_path, "Vulnerable")
        deleteFiles(vulnerable_dir_path)
        
        dir_path = os.path.join(original_dir_path, "julietFiles")
        print(dir_path)
        vulnerable_dir_path = os.path.join(dir_path, "Vulnerable")
        deleteFiles(vulnerable_dir_path)
    elif fileTypes == 3:
        dir_path = os.path.join(dir_path, "FullFileSet")
        print(dir_path)
        vulnerable_dir_path = os.path.join(dir_path, "Vulnerable")
        deleteFiles(vulnerable_dir_path)

    #change back to original working directory
    os.chdir(owd)

    print("Oversampled files cleared")

def deleteFiles(fileDir):
    '''delete duplicated files in the given directory'''
    #get array of all files in directory
    '''fileList = []
    for (dirpath, dirnames, filenames) in os.walk(fileDir):
        fileList.extend(filenames)
        break #break to only get top level dir

    for filename in fileList:
        if "duplicated_file_" in filename:
            src_file = os.path.join(fileDir, filename)
            os.remove(src_file)'''

    duplicatedDir = os.path.join(fileDir, "duplicated")
    shutil.rmtree(duplicatedDir)
